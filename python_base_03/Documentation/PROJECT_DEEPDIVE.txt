Deep Dive: Credit System Project Architecture & Flow
====================================================

1. Application Entry Point (`app.py`)
-------------------------------------
- **Purpose:** Bootstraps the Flask app, initializes the AppManager, sets up CORS, and starts the server (with WebSocket support).
- **Flow:**
  1. Creates `AppManager` instance.
  2. Initializes Flask app and CORS.
  3. Calls `app_manager.initialize(app)` to set up all managers, plugins, modules, and middleware.
  4. Initializes Prometheus metrics.
  5. Runs the app (with WebSocket support) if executed as main.

2. Core Managers (`core/managers/`)
------------------------------------

a. AppManager
   - **Purpose:** The central orchestrator. Initializes and wires up all other managers, plugins, modules, and middleware.
   - **Flow:**
     - On `initialize(app)`:
       - Sets up services (via `ServicesManager`).
       - Initializes WebSocket support.
       - Registers and initializes plugins (via `PluginManager`).
       - Updates Jinja template loader.
       - Sets up rate limiting and monitoring middleware.
     - Provides methods to register template directories, hooks, and trigger events.

b. PluginManager
   - **Purpose:** Registers and manages plugins (modular features).
   - **Flow:**
     - On `register_plugins(app_manager)`:
       - Loads plugin classes from `PluginRegistry`.
       - Instantiates and registers each plugin.
       - Calls each plugin's `initialize(app_manager)` method.

c. ModuleManager
   - **Purpose:** Registers, initializes, and manages modules (feature sets, e.g., ConnectionAPI).
   - **Flow:**
     - On `register_module(key, class, app_manager, ...)`:
       - Instantiates the module.
       - Optionally calls its `initialize()` method.
       - Stores it for later retrieval/calls.

d. ServicesManager
   - **Purpose:** Registers and manages singleton services (e.g., database, cache).
   - **Flow:**
     - On `register_service(key, instance)`:
       - Stores the service.
       - Optionally calls its `initialize()` method.

e. HooksManager
   - **Purpose:** Event system for registering and triggering callbacks (hooks) with priorities and optional context.
   - **Flow:**
     - Register hooks and callbacks.
     - Trigger hooks with data/context, executing all matching callbacks in priority order.

f. WebSocketManager
   - **Purpose:** Manages real-time communication, rooms, presence, and session data via Flask-SocketIO.
   - **Flow:**
     - Initializes SocketIO with custom settings.
     - Handles events: connect, disconnect, join/leave room, broadcast, etc.
     - Stores session and room data in Redis.
     - Enforces rate limits and presence tracking.

g. RateLimiterManager (`core/managers/rate_limiter_manager.py`)
   - **Purpose:** Enforces rate limits per IP, user, or API key, with auto-ban on repeated violations.
   - **Flow:**
     - On initialization:
       - Connects to Redis via RedisManager for storing rate limit data
       - Loads rate limit configs from environment/config file
       - Sets up Flask before_request handler
     
     - On each request (`check_rate_limit()`):
       1. Extracts identifiers from request:
          - IP address from request.remote_addr
          - User ID from JWT token if authenticated
          - API key from request headers if present
       
       2. For each identifier:
          - Gets current count from Redis using key pattern: `ratelimit:{type}:{id}:{window}`
          - Increments counter atomically with MULTI/EXEC
          - Sets TTL based on time window if new key
       
       3. Checks against thresholds:
          - If under limit: allows request
          - If over limit: 
            - Increments violation counter
            - Returns 429 Too Many Requests
            - Adds retry-after header
       
       4. Handles violations:
          - Tracks violation count in Redis: `violations:{type}:{id}`
          - If violations > threshold:
            - Adds identifier to banlist: `banned:{type}:{id}`
            - Sets ban duration (exponential backoff)
            - Returns 403 Forbidden
     
     - Provides methods:
       - `is_banned(identifier)`: Checks if identifier is banned
       - `unban(identifier)`: Removes ban for identifier
       - `get_limits()`: Returns current rate limit status
       - `clear_limits(identifier)`: Resets counters for identifier

h. RedisManager
   - **Purpose:** Secure, encrypted interface to Redis with connection pooling.
   - **Flow:**
     - Initializes connection pool and encryption key (PBKDF2 + Fernet).
     - Provides get/set/delete and advanced operations (token management, room/session data).
     - Encrypts all data at rest in Redis.

i. DatabaseManager (`core/managers/database_manager.py`)
   - **Purpose:** Handles MongoDB connections and CRUD operations with role-based access and encryption.
   - **Flow:**
     - On initialization:
       1. Loads credentials from environment variables (defined in `init-scripts/mongodb-init.js`):
          - MONGODB_USER/PASSWORD for read-write access
          - MONGODB_ANALYTICS_USER/PASSWORD for read-only access
          - MONGODB_ADMIN_USER/PASSWORD for admin access
       2. Creates connection pools for each role using pymongo
       3. Initializes EncryptionManager for field-level encryption
       
     - Connection Management:
       1. Maintains separate connection pools per role
       2. Implements connection retry with exponential backoff
       3. Monitors connection health via Prometheus metrics
       
     - CRUD Operations:
       1. insert_one/many():
          - Encrypts sensitive fields via EncryptionManager
          - Requires read-write or admin role
          - Creates audit log entry
          - Returns inserted _id(s)
       
       2. find_one/many():
          - Supports all roles (read-only, read-write, admin)
          - Decrypts sensitive fields in results
          - Implements query optimization and indexing (see `init-scripts/mongodb-init.js`)
          - Returns cursor or document
       
       3. update_one/many():
          - Requires read-write or admin role
          - Encrypts sensitive fields in updates
          - Creates audit log entry
          - Returns update result
       
       4. delete_one/many():
          - Requires admin role
          - Creates audit log entry
          - Returns delete result
       
     - Security Features:
       - Role enforcement via separate connections
       - Field-level encryption using EncryptionManager
       - Audit logging of all write operations
       - Index management for performance
       - Input validation and sanitization

j. JWTManager
   - **Purpose:** Manages JWT creation, verification, revocation, and refresh, with client fingerprint binding.
   - **Flow:**
     - Creates tokens with expiration and client fingerprint.
     - Stores tokens in Redis for revocation.
     - Verifies tokens, checks revocation, and enforces type and fingerprint.

k. EncryptionManager
   - **Purpose:** Handles encryption/decryption of sensitive data using Fernet (AES-256).
   - **Flow:**
     - Derives key from environment/file using PBKDF2.
     - Provides methods to encrypt/decrypt data and specific fields in dicts.

3. Plugin System
----------------

a. Plugin Registry (`plugins/plugin_registry.py`)
   - **Purpose:** Central list of available plugins.
   - **Flow:**
     - Returns a dict mapping plugin keys to their classes.

b. Main Plugin (`plugins/main_plugin/`)
   - **Purpose:** Initializes the ConnectionAPI and root route.
   - **Flow:**
     - On `initialize(app_manager)`:
       - Registers the ConnectionAPI module (if not already present).
       - Initializes it with the Flask app.
       - Registers the root route (`/`) to a handler.

4. Connection API (`plugins/main_plugin/modules/connection_api/connection_api.py`)
----------------------------------------------------------------------------------
- **Purpose:** Core API for user management, authentication, session handling, and database operations.
- **Flow:**
  1. On initialization, sets up DB managers (read/write, read-only, admin), Redis, JWT, and error handler.
  2. Ensures required collections and indexes exist in MongoDB.
  3. Provides methods for:
     - User CRUD (create, get, delete).
     - Session management (create, remove, check active).
     - Token management (create, validate, refresh, revoke).
     - Query execution with Redis caching and cache invalidation.
  4. Registers API routes (e.g., `/auth/refresh`).
  5. Handles all error cases with centralized error handler.

5. Error Handling (`tools/error_handling/error_handler.py`)
-----------------------------------------------------------
- **Purpose:** Centralized error management, custom exceptions, error tracking, rate limiting, and sanitized responses.
- **Flow:**
  - Handles and logs all errors, returning sanitized messages to clients.
  - Tracks error frequency for rate limiting.
  - Removes sensitive info from error messages.

6. Configuration (`utils/config/config.py`)
-------------------------------------------
- **Purpose:** Centralized configuration via environment variables, with secure defaults and validation.
- **Flow:**
  - Loads all settings (JWT, DB, Redis, rate limits, WebSocket, etc.) from environment or defaults.
  - Used by all managers for consistent configuration.

7. Logging (`tools/logger/`)
----------------------------
- **Purpose:** Structured, multi-level logging for application, gameplay, and function calls.
- **Flow:**
  - Provides decorators and functions for logging events, function calls, and errors.
  - Logs to files: `server.log`, `game_play.log`, `function.log`.

8. Metrics & Monitoring
-----------------------
- **Purpose:** Exposes Prometheus metrics for transaction counts, user balances, and processing durations.
- **Flow:**
  1. Metric Registration & Collection:
     - `core/metrics.py` defines Counter, Gauge and Histogram metrics using prometheus_client
     - Key metrics tracked:
       - User session counts via `user_sessions` collection indexes
       - Transaction processing times from audit_logs
       - API endpoint latencies and error rates
     - Metrics are registered with Flask app via `/metrics` endpoint

  2. Database Integration:
     - MongoDB collections (defined in `init-scripts/mongodb-init.js`):
       - `user_sessions` tracks active user counts
       - `audit_logs` stores transaction timing data
       - Collection indexes optimize metric gathering queries

  3. Application Integration:
     - Gunicorn workers (4 workers as per Dockerfile) collect metrics in parallel
     - Metrics are aggregated across worker processes
     - Rate limiting metrics track API usage patterns

  4. Prometheus Scraping:
     - Scrapes `/metrics` endpoint on 5000 port (exposed in Dockerfile)
     - Configured scrape interval: 15s
     - Stores time-series data for trending

  5. Grafana Visualization:
     - Real-time dashboards show:
       - Active user counts from session metrics
       - Transaction latency distributions
       - Error rates and types
     - Drill-down capabilities for debugging

  6. AlertManager Rules:
     - Triggers on:
       - High error rates (>5%)
       - Elevated latency (p95 > 500ms)
       - Unusual user session patterns
     - Alerts sent via configured channels (email, Slack)

9. Security & Secrets
---------------------
- **Purpose:** Ensure that all sensitive credentials and cryptographic keys (such as database passwords, JWT signing keys, and encryption keys) are securely managed and never hardcoded in the codebase.

- **Detailed Flow:**

  1. **Secret Provisioning via Docker Compose:**
     - During deployment, Docker Compose is configured to mount secret files from the host into the container at the `secrets/` directory.
     - Example: Database credentials, JWT secret, and encryption keys are provided as individual files (e.g., `secrets/mongodb_user`, `secrets/jwt_secret`, `secrets/encryption_key`).

  2. **Secret Loading at Application Startup:**
     - On application startup, each manager or service that requires a secret reads the relevant file from the `secrets/` directory.
     - This is typically done using Python's built-in file I/O, e.g.:
       ```python
       with open('/secrets/mongodb_user') as f:
           mongodb_user = f.read().strip()
       ```
     - No secrets are ever committed to the codebase or environment variables directly.

  3. **Manager Integration:**
     - **DatabaseManager** ([core/managers/database_manager.py](core/managers/database_manager.py)):
       - Loads MongoDB credentials and encryption keys from the `secrets/` directory at initialization.
       - See: [DatabaseManager initialization logic](core/managers/database_manager.py#L10-L40)
     - **RedisManager** ([core/managers/redis_manager.py](core/managers/redis_manager.py)):
       - Loads Redis credentials and the encryption key for Fernet encryption from secret files.
       - See: [RedisManager secret loading](core/managers/redis_manager.py#L15-L35)
     - **JWTManager** ([core/managers/jwt_manager.py](core/managers/jwt_manager.py)):
       - Loads the JWT signing key from a secret file for token creation and verification.
       - See: [JWTManager secret usage](core/managers/jwt_manager.py#L8-L25)
     - **Other Managers/Services:**
       - Any additional service requiring secrets follows the same pattern: read from `secrets/` at startup, never hardcoded.

  4. **Security Enforcement:**
     - If a required secret file is missing or unreadable, the application fails to start, ensuring no insecure fallback occurs.
     - Secrets are only accessible to the application process inside the container, minimizing exposure.

  5. **Reference Code:**
     - [Docker Compose secrets configuration](docker-compose.yml#secrets)
     - [DatabaseManager secret loading example](core/managers/database_manager.py#L10-L40)
     - [RedisManager encryption key loading](core/managers/redis_manager.py#L15-L35)
     - [JWTManager secret loading](core/managers/jwt_manager.py#L8-L25)

- **Summary:**  
  All sensitive secrets are securely injected at runtime via mounted files, loaded by managers at startup, and never exposed in code or environment variables. This approach is enforced throughout the codebase for all critical services.

10. Flow of a Typical Request
-----------------------------
1. **HTTP Request** hits Flask app.
2. **AppManager** middleware checks rate limits, logs, and metrics.
3. **PluginManager** and **ModuleManager** route the request to the correct API handler (e.g., ConnectionAPI).
4. **ConnectionAPI**:
   - Authenticates user (JWT, session, etc.).
   - Performs DB operations (via DatabaseManager).
   - Caches/fetches results in Redis (via RedisManager).
   - Handles errors (via ErrorHandler).
5. **Response** is returned, with all logs, metrics, and error handling applied.

11. WebSocket Flow
------------------
1. **Client connects** via SocketIO.
2. **WebSocketManager** authenticates, tracks session, and enforces rate limits.
3. **Events** (join room, send message, etc.) are handled, with session/room data stored in Redis.
4. **Presence and room size** are tracked and enforced.
5. **Broadcasts** and direct messages are sent as needed.

12. Extending the System
------------------------
- **Add a Plugin:** Create a new directory in `plugins/`, implement the interface, and register in `plugin_registry.py`.
- **Add a Module:** Register with `ModuleManager` for new business logic.
- **Add a Service:** Register with `ServicesManager` for new singletons.
- **Add Metrics:** Define in `core/metrics.py` and expose via Flask.
- **Add Dashboards:** Create in `grafana/dashboards/`.

13. Security & Best Practices
----------------------------
- All API access is authenticated and encrypted.
- Secrets are never hardcoded.
- Rate limiting and error handling prevent abuse.
- Database and cache connections are encrypted and pooled.
- Regular security audits and log monitoring are recommended.

---
If you want this in a .docx file, let me know and I can generate it for you (requires Python docx library and write permissions). 