---
- name: Setup MongoDB Database Structure and Dummy Data (Local Docker)
  hosts: localhost
  connection: local
  vars:
    mongodb_container_name: "credit_system_mongodb"
    database_name: "credit_system"
    app_user: "credit_app_user"
    app_password: "6R3jjsvVhIRP20zMiHdkBzNKx"
    
    # MongoDB connection details for Docker
    mongodb_host: "localhost"
    mongodb_port: "27017"
    mongodb_auth_db: "credit_system"

  tasks:
    - name: Wait for MongoDB container to be ready
      shell: docker exec {{ mongodb_container_name }} mongosh --eval "db.adminCommand('ping')" --quiet
      register: mongodb_ready
      retries: 30
      delay: 2
      until: mongodb_ready.rc == 0
      changed_when: mongodb_ready.rc == 0

    - name: Empty database completely
      shell: |
        docker exec {{ mongodb_container_name }} mongosh -u {{ app_user }} -p "{{ app_password }}" --authenticationDatabase {{ mongodb_auth_db }} --eval "
          db = db.getSiblingDB('credit_system');
          print('üóëÔ∏è Emptying database completely...');
          
          // Get all collection names
          var collections = db.getCollectionNames();
          print('Found ' + collections.length + ' collections to drop');
          
          // Drop each collection
          collections.forEach(function(collectionName) {
            if (collectionName !== 'system.indexes' && collectionName !== 'system.namespaces') {
              print('Dropping collection: ' + collectionName);
              db[collectionName].drop();
            }
          });
          
          print('‚úÖ Database emptied successfully');
          print('Remaining collections: ' + db.getCollectionNames().length);
        "
      register: empty_db_result
      changed_when: true

    - name: Display empty database results
      debug:
        msg: "{{ empty_db_result.stdout }}"

    - name: Create database structure setup script
      copy:
        dest: "/tmp/setup_database.js"
        content: |
          // MongoDB Database Structure Setup Script
          // Credit System Database with Modular Collections
          
          // Switch to the credit_system database
          db = db.getSiblingDB('credit_system');
          
          print("üóÑÔ∏è Setting up Credit System Database Structure...");
          
          // ========================================
          // 1. USERS COLLECTION (User Module)
          // ========================================
          print("üìù Creating users collection...");
          
          // Create users collection with indexes
          db.createCollection("users");
          db.users.createIndex({ "email": 1 }, { unique: true });
          db.users.createIndex({ "username": 1 });
          db.users.createIndex({ "status": 1 });
          db.users.createIndex({ "created_at": 1 });
          
          // Insert dummy users
          db.users.insertMany([
            {
              "_id": ObjectId("507f1f77bcf86cd799439011"),
              "email": "john.doe@example.com",
              "username": "johndoe",
              "password": "$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.i8e", // "password123"
              "status": "active",
              "created_at": new Date("2024-01-15T10:30:00Z"),
              "updated_at": new Date("2024-01-15T10:30:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439012"),
              "email": "jane.smith@example.com",
              "username": "janesmith",
              "password": "$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.i8e", // "password123"
              "status": "active",
              "created_at": new Date("2024-01-20T14:45:00Z"),
              "updated_at": new Date("2024-01-20T14:45:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439013"),
              "email": "bob.wilson@example.com",
              "username": "bobwilson",
              "password": "$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.i8e", // "password123"
              "status": "active",
              "created_at": new Date("2024-02-01T09:15:00Z"),
              "updated_at": new Date("2024-02-01T09:15:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439014"),
              "email": "alice.johnson@example.com",
              "username": "alicejohnson",
              "password": "$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.i8e", // "password123"
              "status": "active",
              "created_at": new Date("2024-02-10T16:20:00Z"),
              "updated_at": new Date("2024-02-10T16:20:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439015"),
              "email": "mike.brown@example.com",
              "username": "mikebrown",
              "password": "$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LewdBPj4J/HS.i8e", // "password123"
              "status": "active",
              "created_at": new Date("2024-02-15T11:30:00Z"),
              "updated_at": new Date("2024-02-15T11:30:00Z")
            }
          ]);
          
          print("‚úÖ Users collection created with " + db.users.countDocuments() + " users");
          
          // ========================================
          // 2. WALLETS COLLECTION (Wallet Module)
          // ========================================
          print("üí≥ Creating wallets collection...");
          
          db.createCollection("wallets");
          db.wallets.createIndex({ "user_id": 1 }, { unique: true });
          db.wallets.createIndex({ "balance": 1 });
          db.wallets.createIndex({ "updated_at": 1 });
          
          // Insert dummy wallets
          db.wallets.insertMany([
            {
              "_id": ObjectId("507f1f77bcf86cd799439021"),
              "user_id": ObjectId("507f1f77bcf86cd799439011"),
              "balance": 1500,
              "currency": "credits",
              "created_at": new Date("2024-01-15T10:30:00Z"),
              "updated_at": new Date("2024-03-01T12:00:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439022"),
              "user_id": ObjectId("507f1f77bcf86cd799439012"),
              "balance": 750,
              "currency": "credits",
              "created_at": new Date("2024-01-20T14:45:00Z"),
              "updated_at": new Date("2024-03-01T12:00:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439023"),
              "user_id": ObjectId("507f1f77bcf86cd799439013"),
              "balance": 2200,
              "currency": "credits",
              "created_at": new Date("2024-02-01T09:15:00Z"),
              "updated_at": new Date("2024-03-01T12:00:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439024"),
              "user_id": ObjectId("507f1f77bcf86cd799439014"),
              "balance": 500,
              "currency": "credits",
              "created_at": new Date("2024-02-10T16:20:00Z"),
              "updated_at": new Date("2024-03-01T12:00:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439025"),
              "user_id": ObjectId("507f1f77bcf86cd799439015"),
              "balance": 3200,
              "currency": "credits",
              "created_at": new Date("2024-02-15T11:30:00Z"),
              "updated_at": new Date("2024-03-01T12:00:00Z")
            }
          ]);
          
          print("‚úÖ Wallets collection created with " + db.wallets.countDocuments() + " wallets");
          
          // ========================================
          // 3. TRANSACTIONS COLLECTION (Transactions Module)
          // ========================================
          print("üìí Creating transactions collection...");
          
          db.createCollection("transactions");
          db.transactions.createIndex({ "user_id": 1 });
          db.transactions.createIndex({ "type": 1 });
          db.transactions.createIndex({ "timestamp": 1 });
          db.transactions.createIndex({ "source": 1 });
          db.transactions.createIndex({ "ref_id": 1 });
          
          // Insert dummy transactions
          db.transactions.insertMany([
            {
              "_id": ObjectId("507f1f77bcf86cd799439031"),
              "user_id": ObjectId("507f1f77bcf86cd799439011"),
              "type": "credit",
              "source": "purchase",
              "ref_id": ObjectId("507f1f77bcf86cd799439041"),
              "amount": 1000,
              "timestamp": new Date("2024-01-15T10:30:00Z"),
              "description": "Initial credit purchase"
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439032"),
              "user_id": ObjectId("507f1f77bcf86cd799439011"),
              "type": "debit",
              "source": "usage",
              "amount": 200,
              "timestamp": new Date("2024-01-20T15:45:00Z"),
              "description": "Service usage"
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439033"),
              "user_id": ObjectId("507f1f77bcf86cd799439011"),
              "type": "credit",
              "source": "purchase",
              "ref_id": ObjectId("507f1f77bcf86cd799439042"),
              "amount": 700,
              "timestamp": new Date("2024-02-01T09:15:00Z"),
              "description": "Additional credits"
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439034"),
              "user_id": ObjectId("507f1f77bcf86cd799439012"),
              "type": "credit",
              "source": "purchase",
              "ref_id": ObjectId("507f1f77bcf86cd799439043"),
              "amount": 500,
              "timestamp": new Date("2024-01-20T14:45:00Z"),
              "description": "Initial purchase"
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439035"),
              "user_id": ObjectId("507f1f77bcf86cd799439012"),
              "type": "credit",
              "source": "purchase",
              "ref_id": ObjectId("507f1f77bcf86cd799439044"),
              "amount": 250,
              "timestamp": new Date("2024-02-15T11:30:00Z"),
              "description": "Top-up purchase"
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439036"),
              "user_id": ObjectId("507f1f77bcf86cd799439013"),
              "type": "credit",
              "source": "purchase",
              "ref_id": ObjectId("507f1f77bcf86cd799439045"),
              "amount": 2000,
              "timestamp": new Date("2024-02-01T09:15:00Z"),
              "description": "Large credit purchase"
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439037"),
              "user_id": ObjectId("507f1f77bcf86cd799439013"),
              "type": "credit",
              "source": "purchase",
              "ref_id": ObjectId("507f1f77bcf86cd799439046"),
              "amount": 200,
              "timestamp": new Date("2024-02-20T16:00:00Z"),
              "description": "Small top-up"
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439038"),
              "user_id": ObjectId("507f1f77bcf86cd799439014"),
              "type": "credit",
              "source": "purchase",
              "ref_id": ObjectId("507f1f77bcf86cd799439047"),
              "amount": 500,
              "timestamp": new Date("2024-02-10T16:20:00Z"),
              "description": "Initial purchase"
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439039"),
              "user_id": ObjectId("507f1f77bcf86cd799439015"),
              "type": "credit",
              "source": "purchase",
              "ref_id": ObjectId("507f1f77bcf86cd799439048"),
              "amount": 3000,
              "timestamp": new Date("2024-02-15T11:30:00Z"),
              "description": "Premium package"
            },
            {
              "_id": ObjectId("507f1f77bcf86cd79943903a"),
              "user_id": ObjectId("507f1f77bcf86cd799439015"),
              "type": "credit",
              "source": "purchase",
              "ref_id": ObjectId("507f1f77bcf86cd799439049"),
              "amount": 200,
              "timestamp": new Date("2024-02-25T13:45:00Z"),
              "description": "Additional credits"
            }
          ]);
          
          print("‚úÖ Transactions collection created with " + db.transactions.countDocuments() + " transactions");
          
          // ========================================
          // 4. PURCHASES COLLECTION (Purchasing Module)
          // ========================================
          print("üõçÔ∏è Creating purchases collection...");
          
          db.createCollection("purchases");
          db.purchases.createIndex({ "user_id": 1 });
          db.purchases.createIndex({ "provider": 1 });
          db.purchases.createIndex({ "status": 1 });
          db.purchases.createIndex({ "created_at": 1 });
          db.purchases.createIndex({ "transaction_id": 1 }, { unique: true });
          
          // Insert dummy purchases
          db.purchases.insertMany([
            {
              "_id": ObjectId("507f1f77bcf86cd799439041"),
              "user_id": ObjectId("507f1f77bcf86cd799439011"),
              "provider": "external_app",
              "amount_usd": 9.99,
              "status": "completed",
              "credits_awarded": 1000,
              "transaction_id": "txn_001",
              "created_at": new Date("2024-01-15T10:30:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439042"),
              "user_id": ObjectId("507f1f77bcf86cd799439011"),
              "provider": "external_app",
              "amount_usd": 6.99,
              "status": "completed",
              "credits_awarded": 700,
              "transaction_id": "txn_002",
              "created_at": new Date("2024-02-01T09:15:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439043"),
              "user_id": ObjectId("507f1f77bcf86cd799439012"),
              "provider": "google",
              "amount_usd": 4.99,
              "status": "completed",
              "credits_awarded": 500,
              "transaction_id": "txn_003",
              "created_at": new Date("2024-01-20T14:45:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439044"),
              "user_id": ObjectId("507f1f77bcf86cd799439012"),
              "provider": "apple",
              "amount_usd": 2.99,
              "status": "completed",
              "credits_awarded": 250,
              "transaction_id": "txn_004",
              "created_at": new Date("2024-02-15T11:30:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439045"),
              "user_id": ObjectId("507f1f77bcf86cd799439013"),
              "provider": "external_app",
              "amount_usd": 19.99,
              "status": "completed",
              "credits_awarded": 2000,
              "transaction_id": "txn_005",
              "created_at": new Date("2024-02-01T09:15:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439046"),
              "user_id": ObjectId("507f1f77bcf86cd799439013"),
              "provider": "google",
              "amount_usd": 1.99,
              "status": "completed",
              "credits_awarded": 200,
              "transaction_id": "txn_006",
              "created_at": new Date("2024-02-20T16:00:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439047"),
              "user_id": ObjectId("507f1f77bcf86cd799439014"),
              "provider": "apple",
              "amount_usd": 4.99,
              "status": "completed",
              "credits_awarded": 500,
              "transaction_id": "txn_007",
              "created_at": new Date("2024-02-10T16:20:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439048"),
              "user_id": ObjectId("507f1f77bcf86cd799439015"),
              "provider": "external_app",
              "amount_usd": 29.99,
              "status": "completed",
              "credits_awarded": 3000,
              "transaction_id": "txn_008",
              "created_at": new Date("2024-02-15T11:30:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439049"),
              "user_id": ObjectId("507f1f77bcf86cd799439015"),
              "provider": "google",
              "amount_usd": 1.99,
              "status": "completed",
              "credits_awarded": 200,
              "transaction_id": "txn_009",
              "created_at": new Date("2024-02-25T13:45:00Z")
            }
          ]);
          
          print("‚úÖ Purchases collection created with " + db.purchases.countDocuments() + " purchases");
          
          // ========================================
          // 5. PAYMENT_PROVIDERS COLLECTION (Payment Module)
          // ========================================
          print("üí≥ Creating payment_providers collection...");
          
          db.createCollection("payment_providers");
          db.payment_providers.createIndex({ "provider": 1 });
          db.payment_providers.createIndex({ "user_id": 1 });
          db.payment_providers.createIndex({ "status": 1 });
          db.payment_providers.createIndex({ "validated_at": 1 });
          db.payment_providers.createIndex({ "linked_purchase_id": 1 });
          
          // Insert dummy payment provider records
          db.payment_providers.insertMany([
            {
              "_id": ObjectId("507f1f77bcf86cd799439051"),
              "provider": "external_app",
              "user_id": ObjectId("507f1f77bcf86cd799439011"),
              "purchase_token": "ext_purchase_token_001",
              "linked_purchase_id": ObjectId("507f1f77bcf86cd799439041"),
              "status": "validated",
              "raw_response": {
                "app_id": "game1",
                "amount": 999,
                "currency": "usd",
                "status": "succeeded"
              },
              "validated_at": new Date("2024-01-15T10:30:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439052"),
              "provider": "external_app",
              "user_id": ObjectId("507f1f77bcf86cd799439011"),
              "purchase_token": "ext_purchase_token_002",
              "linked_purchase_id": ObjectId("507f1f77bcf86cd799439042"),
              "status": "validated",
              "raw_response": {
                "app_id": "game1",
                "amount": 699,
                "currency": "usd",
                "status": "succeeded"
              },
              "validated_at": new Date("2024-02-01T09:15:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439053"),
              "provider": "google",
              "user_id": ObjectId("507f1f77bcf86cd799439012"),
              "purchase_token": "google_purchase_token_001",
              "linked_purchase_id": ObjectId("507f1f77bcf86cd799439043"),
              "status": "validated",
              "raw_response": {
                "purchaseToken": "google_purchase_token_001",
                "orderId": "order_001",
                "purchaseState": 0
              },
              "validated_at": new Date("2024-01-20T14:45:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439054"),
              "provider": "apple",
              "user_id": ObjectId("507f1f77bcf86cd799439012"),
              "purchase_token": "apple_purchase_token_001",
              "linked_purchase_id": ObjectId("507f1f77bcf86cd799439044"),
              "status": "validated",
              "raw_response": {
                "transaction_id": "1000000000000001",
                "product_id": "com.example.credits",
                "purchase_date_ms": "1708000000000"
              },
              "validated_at": new Date("2024-02-15T11:30:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439055"),
              "provider": "external_app",
              "user_id": ObjectId("507f1f77bcf86cd799439013"),
              "purchase_token": "ext_purchase_token_003",
              "linked_purchase_id": ObjectId("507f1f77bcf86cd799439045"),
              "status": "validated",
              "raw_response": {
                "app_id": "game2",
                "amount": 1999,
                "currency": "usd",
                "status": "succeeded"
              },
              "validated_at": new Date("2024-02-01T09:15:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439056"),
              "provider": "google",
              "user_id": ObjectId("507f1f77bcf86cd799439013"),
              "purchase_token": "google_purchase_token_002",
              "linked_purchase_id": ObjectId("507f1f77bcf86cd799439046"),
              "status": "validated",
              "raw_response": {
                "purchaseToken": "google_purchase_token_002",
                "orderId": "order_002",
                "purchaseState": 0
              },
              "validated_at": new Date("2024-02-20T16:00:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439057"),
              "provider": "apple",
              "user_id": ObjectId("507f1f77bcf86cd799439014"),
              "purchase_token": "apple_purchase_token_002",
              "linked_purchase_id": ObjectId("507f1f77bcf86cd799439047"),
              "status": "validated",
              "raw_response": {
                "transaction_id": "1000000000000002",
                "product_id": "com.example.credits",
                "purchase_date_ms": "1708000000000"
              },
              "validated_at": new Date("2024-02-10T16:20:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439058"),
              "provider": "external_app",
              "user_id": ObjectId("507f1f77bcf86cd799439015"),
              "purchase_token": "ext_purchase_token_004",
              "linked_purchase_id": ObjectId("507f1f77bcf86cd799439048"),
              "status": "validated",
              "raw_response": {
                "app_id": "game3",
                "amount": 2999,
                "currency": "usd",
                "status": "succeeded"
              },
              "validated_at": new Date("2024-02-15T11:30:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439059"),
              "provider": "google",
              "user_id": ObjectId("507f1f77bcf86cd799439015"),
              "purchase_token": "google_purchase_token_003",
              "linked_purchase_id": ObjectId("507f1f77bcf86cd799439049"),
              "status": "validated",
              "raw_response": {
                "purchaseToken": "google_purchase_token_003",
                "orderId": "order_003",
                "purchaseState": 0
              },
              "validated_at": new Date("2024-02-25T13:45:00Z")
            }
          ]);
          
          print("‚úÖ Payment providers collection created with " + db.payment_providers.countDocuments() + " records");
          
          // ========================================
          // 6. AUDIT_LOGS COLLECTION (Admin Module)
          // ========================================
          print("üì¢ Creating audit_logs collection...");
          
          db.createCollection("audit_logs");
          db.audit_logs.createIndex({ "user_id": 1 });
          db.audit_logs.createIndex({ "action": 1 });
          db.audit_logs.createIndex({ "admin_id": 1 });
          db.audit_logs.createIndex({ "timestamp": 1 });
          
          // Insert dummy audit logs
          db.audit_logs.insertMany([
            {
              "_id": ObjectId("507f1f77bcf86cd799439061"),
              "user_id": ObjectId("507f1f77bcf86cd799439011"),
              "action": "admin_credit",
              "admin_id": ObjectId("507f1f77bcf86cd799439001"),
              "change": { "amount": 100, "reason": "Customer service adjustment" },
              "timestamp": new Date("2024-01-25T10:00:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439062"),
              "user_id": ObjectId("507f1f77bcf86cd799439012"),
              "action": "admin_debit",
              "admin_id": ObjectId("507f1f77bcf86cd799439001"),
              "change": { "amount": 50, "reason": "Fraudulent activity reversal" },
              "timestamp": new Date("2024-02-05T14:30:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439063"),
              "user_id": ObjectId("507f1f77bcf86cd799439013"),
              "action": "admin_credit",
              "admin_id": ObjectId("507f1f77bcf86cd799439002"),
              "change": { "amount": 200, "reason": "Compensation for service outage" },
              "timestamp": new Date("2024-02-10T09:15:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439064"),
              "user_id": ObjectId("507f1f77bcf86cd799439014"),
              "action": "admin_credit",
              "admin_id": ObjectId("507f1f77bcf86cd799439001"),
              "change": { "amount": 75, "reason": "Referral bonus" },
              "timestamp": new Date("2024-02-12T16:45:00Z")
            },
            {
              "_id": ObjectId("507f1f77bcf86cd799439065"),
              "user_id": ObjectId("507f1f77bcf86cd799439015"),
              "action": "admin_debit",
              "admin_id": ObjectId("507f1f77bcf86cd799439002"),
              "change": { "amount": 150, "reason": "Chargeback processing" },
              "timestamp": new Date("2024-02-28T11:20:00Z")
            }
          ]);
          
          print("‚úÖ Audit logs collection created with " + db.audit_logs.countDocuments() + " records");
          
          // ========================================
          // FINAL SUMMARY
          // ========================================
          print("\nüéâ DATABASE STRUCTURE SETUP COMPLETE!");
          print("=====================================");
          print("Collections created:");
          print("- users: " + db.users.countDocuments() + " documents");
          print("- wallets: " + db.wallets.countDocuments() + " documents");
          print("- transactions: " + db.transactions.countDocuments() + " documents");
          print("- purchases: " + db.purchases.countDocuments() + " documents");
          print("- payment_providers: " + db.payment_providers.countDocuments() + " documents");
          print("- audit_logs: " + db.audit_logs.countDocuments() + " documents");
          print("\nüìä Total documents: " + (db.users.countDocuments() + db.wallets.countDocuments() + db.transactions.countDocuments() + db.purchases.countDocuments() + db.payment_providers.countDocuments() + db.audit_logs.countDocuments()));
          print("\n‚úÖ Credit System Database is ready for development!");
        mode: '0644'

    - name: Copy setup script to MongoDB container
      shell: docker cp /tmp/setup_database.js {{ mongodb_container_name }}:/tmp/setup_database.js
      register: copy_result
      changed_when: copy_result.rc == 0

    - name: Execute database structure setup
      shell: |
        docker exec {{ mongodb_container_name }} mongosh -u {{ app_user }} -p "{{ app_password }}" --authenticationDatabase {{ mongodb_auth_db }} --eval "$(cat /tmp/setup_database.js)"
      register: db_setup_result
      changed_when: true

    - name: Display database setup results
      debug:
        msg: "{{ db_setup_result.stdout }}"

    - name: Verify database collections
      shell: |
        docker exec {{ mongodb_container_name }} mongosh -u {{ app_user }} -p "{{ app_password }}" --authenticationDatabase {{ mongodb_auth_db }} --eval "
          db = db.getSiblingDB('credit_system');
          print('\\nüìã COLLECTION SUMMARY:');
          print('=====================');
          db.getCollectionNames().forEach(function(collection) {
            print(collection + ': ' + db[collection].countDocuments() + ' documents');
          });
          print('\\nüìä TOTAL DOCUMENTS: ' + db.getCollectionNames().reduce(function(total, collection) {
            return total + db[collection].countDocuments();
          }, 0));
        "
      register: collection_summary
      changed_when: false

    - name: Display collection summary
      debug:
        msg: "{{ collection_summary.stdout }}"

    - name: Clean up temporary files
      file:
        path: "/tmp/setup_database.js"
        state: absent

    - name: Display database structure summary
      debug:
        msg: |
          üóÑÔ∏è MongoDB Database Structure Setup Complete!
          
          üìã Collections Created:
          - users: User management and authentication
          - wallets: Credit balance tracking per user
          - transactions: Complete ledger of all credit/debit operations
          - purchases: Record of all successful payments
          - payment_providers: External payment validation data
          - audit_logs: Administrative action tracking
          
          üîó Connection Details:
          - Container: {{ mongodb_container_name }}
          - Host: {{ mongodb_host }}
          - Port: {{ mongodb_port }}
          - Database: {{ database_name }}
          - User: {{ app_user }}
          - Password: {{ app_password }}
          - Auth Source: {{ mongodb_auth_db }}
          
          üìä Dummy Data Added:
          - 5 users with different balances
          - 10 transactions across all users
          - 9 purchase records from multiple providers
          - 9 payment provider validation records
          - 5 audit log entries for admin actions
          
          ‚úÖ Database is ready for application development! 