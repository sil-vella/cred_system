---
- name: Setup Database Structure for Credit System (Local k3d)
  hosts: localhost
  connection: local
  vars:
    flask_namespace: "flask-app"
    mongodb_service: "mongodb"
    database_name: "credit_system"
    app_username: "credit_app_user"
    app_password: "6R3jjsvVhIRP20zMiHdkBzNKx"
    
    # Root user credentials (created by Helm)
    root_username: "mongodb_admin"
    root_password: "MongoAdmin123!@#SecurePass"
    
    # MongoDB connection details
    mongodb_host: "{{ mongodb_service }}.{{ flask_namespace }}.svc.cluster.local"
    mongodb_port: "27017"
    mongodb_auth_source: "{{ database_name }}"
    
    # Collections to create
    collections:
      - name: "users"
        module: "User Management"
        indexes:
          - key: {"email": 1}
            unique: true
            name: "email_unique"
          - key: {"username": 1}
            unique: true
            name: "username_unique"
          - key: {"status": 1}
            name: "status_index"
          - key: {"created_at": 1}
            name: "created_at_index"
      
      - name: "wallets"
        module: "Wallet"
        indexes:
          - key: {"user_id": 1}
            unique: true
            name: "user_id_unique"
          - key: {"balance": 1}
            name: "balance_index"
          - key: {"updated_at": 1}
            name: "updated_at_index"
      
      - name: "transactions"
        module: "Transactions"
        indexes:
          - key: {"user_id": 1}
            name: "user_id_index"
          - key: {"type": 1}
            name: "type_index"
          - key: {"timestamp": 1}
            name: "timestamp_index"
          - key: {"user_id": 1, "timestamp": -1}
            name: "user_timestamp_index"
          - key: {"ref_id": 1}
            name: "ref_id_index"
      
      - name: "purchases"
        module: "Purchases"
        indexes:
          - key: {"user_id": 1}
            name: "user_id_index"
          - key: {"provider": 1}
            name: "provider_index"
          - key: {"status": 1}
            name: "status_index"
          - key: {"created_at": 1}
            name: "created_at_index"
          - key: {"user_id": 1, "created_at": -1}
            name: "user_created_index"
      
      - name: "payment_providers"
        module: "Payments"
        indexes:
          - key: {"user_id": 1}
            name: "user_id_index"
          - key: {"provider": 1}
            name: "provider_index"
          - key: {"purchase_token": 1}
            unique: true
            name: "purchase_token_unique"
          - key: {"linked_purchase_id": 1}
            name: "linked_purchase_index"
          - key: {"status": 1}
            name: "status_index"
          - key: {"validated_at": 1}
            name: "validated_at_index"
      
      - name: "audit_logs"
        module: "Audit/Admin"
        indexes:
          - key: {"user_id": 1}
            name: "user_id_index"
          - key: {"action": 1}
            name: "action_index"
          - key: {"admin_id": 1}
            name: "admin_id_index"
          - key: {"timestamp": 1}
            name: "timestamp_index"
          - key: {"user_id": 1, "timestamp": -1}
            name: "user_timestamp_index"

  tasks:
    - name: Verify MongoDB is running
      shell: |
        kubectl get pods -n {{ flask_namespace }} -l app.kubernetes.io/name=mongodb --no-headers | grep Running
      register: mongodb_pod_status
      changed_when: false
      failed_when: mongodb_pod_status.rc != 0

    - name: Wait for MongoDB to be ready
      shell: kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=mongodb -n {{ flask_namespace }} --timeout=60s
      changed_when: false

    - name: Drop and recreate database completely
      shell: |
        echo "üóëÔ∏è  Dropping entire database..."
        kubectl exec -n {{ flask_namespace }} deployment/{{ mongodb_service }} -- \
          mongosh "mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}" \
          --eval "
            print('üóëÔ∏è  Dropping database: {{ database_name }}');
            db = db.getSiblingDB('{{ database_name }}');
            db.dropDatabase();
            print('‚úÖ Database dropped successfully');
          "
      ignore_errors: true

    - name: Wait for database drop to complete
      shell: sleep 2
      changed_when: false

    - name: Create collections
      shell: |
        echo "üìã Creating collections..."
        kubectl exec -n {{ flask_namespace }} deployment/{{ mongodb_service }} -- \
          mongosh "mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}" \
          --eval "
            use {{ database_name }};
            const collections = ['users', 'wallets', 'transactions', 'purchases', 'payment_providers', 'audit_logs'];
            collections.forEach(function(collection) {
              if (!db.getCollectionNames().includes(collection)) {
                db.createCollection(collection);
                print('‚úÖ Created collection: ' + collection);
              } else {
                print('‚ÑπÔ∏è  Collection exists: ' + collection);
              }
            });
          "
      ignore_errors: true

    - name: Create users indexes
      shell: |
        echo "üîç Creating users indexes..."
        kubectl exec -n {{ flask_namespace }} deployment/{{ mongodb_service }} -- \
          mongosh "mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}" \
          --eval "
            use {{ database_name }};
            try { db.users.createIndex({email: 1}, {unique: true, name: 'email_unique'}); print('‚úÖ email_unique'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  email_unique exists'); }
            try { db.users.createIndex({username: 1}, {unique: true, name: 'username_unique'}); print('‚úÖ username_unique'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  username_unique exists'); }
            try { db.users.createIndex({status: 1}, {name: 'status_index'}); print('‚úÖ status_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  status_index exists'); }
          "
      ignore_errors: true

    - name: Create wallets indexes
      shell: |
        echo "üîç Creating wallets indexes..."
        kubectl exec -n {{ flask_namespace }} deployment/{{ mongodb_service }} -- \
          mongosh "mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}" \
          --eval "
            use {{ database_name }};
            try { db.wallets.createIndex({user_id: 1}, {unique: true, name: 'user_id_unique'}); print('‚úÖ user_id_unique'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  user_id_unique exists'); }
            try { db.wallets.createIndex({balance: 1}, {name: 'balance_index'}); print('‚úÖ balance_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  balance_index exists'); }
          "
      ignore_errors: true

    - name: Create transactions indexes
      shell: |
        echo "üîç Creating transactions indexes..."
        kubectl exec -n {{ flask_namespace }} deployment/{{ mongodb_service }} -- \
          mongosh "mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}" \
          --eval "
            use {{ database_name }};
            try { db.transactions.createIndex({user_id: 1}, {name: 'user_id_index'}); print('‚úÖ user_id_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  user_id_index exists'); }
            try { db.transactions.createIndex({type: 1}, {name: 'type_index'}); print('‚úÖ type_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  type_index exists'); }
            try { db.transactions.createIndex({timestamp: 1}, {name: 'timestamp_index'}); print('‚úÖ timestamp_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  timestamp_index exists'); }
          "
      ignore_errors: true

    - name: Create purchases indexes
      shell: |
        echo "üîç Creating purchases indexes..."
        kubectl exec -n {{ flask_namespace }} deployment/{{ mongodb_service }} -- \
          mongosh "mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}" \
          --eval "
            use {{ database_name }};
            try { db.purchases.createIndex({user_id: 1}, {name: 'user_id_index'}); print('‚úÖ user_id_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  user_id_index exists'); }
            try { db.purchases.createIndex({provider: 1}, {name: 'provider_index'}); print('‚úÖ provider_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  provider_index exists'); }
            try { db.purchases.createIndex({status: 1}, {name: 'status_index'}); print('‚úÖ status_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  status_index exists'); }
          "
      ignore_errors: true

    - name: Create payment_providers indexes
      shell: |
        echo "üîç Creating payment_providers indexes..."
        kubectl exec -n {{ flask_namespace }} deployment/{{ mongodb_service }} -- \
          mongosh "mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}" \
          --eval "
            use {{ database_name }};
            try { db.payment_providers.createIndex({user_id: 1}, {name: 'user_id_index'}); print('‚úÖ user_id_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  user_id_index exists'); }
            try { db.payment_providers.createIndex({purchase_token: 1}, {unique: true, name: 'purchase_token_unique'}); print('‚úÖ purchase_token_unique'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  purchase_token_unique exists'); }
          "
      ignore_errors: true

    - name: Create audit_logs indexes
      shell: |
        echo "üîç Creating audit_logs indexes..."
        kubectl exec -n {{ flask_namespace }} deployment/{{ mongodb_service }} -- \
          mongosh "mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}" \
          --eval "
            use {{ database_name }};
            try { db.audit_logs.createIndex({user_id: 1}, {name: 'user_id_index'}); print('‚úÖ user_id_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  user_id_index exists'); }
            try { db.audit_logs.createIndex({action: 1}, {name: 'action_index'}); print('‚úÖ action_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  action_index exists'); }
            try { db.audit_logs.createIndex({timestamp: 1}, {name: 'timestamp_index'}); print('‚úÖ timestamp_index'); } catch(e) { if (e.code === 85) print('‚ÑπÔ∏è  timestamp_index exists'); }
          "
      ignore_errors: true
      register: db_setup_result
      changed_when: true

    - name: Verify database structure
      shell: |
        echo "üîç Verifying database structure..."
        kubectl exec -n {{ flask_namespace }} deployment/{{ mongodb_service }} -- \
          mongosh "mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}" \
          --eval "
            use {{ database_name }};
            print('üìã Collections: ' + db.getCollectionNames().join(', '));
            print('‚úÖ Database structure verified');
          "
      register: db_verification
      changed_when: false
      ignore_errors: true

    - name: Display database setup summary
      debug:
        msg: |
          üóÑÔ∏è Credit System Database Structure Setup Complete!
          
          üìã Modular Database Design:
          - users (User Management Module)
          - wallets (Wallet Module) 
          - transactions (Transactions Module)
          - purchases (Purchases Module)
          - payment_providers (Payments Module)
          - audit_logs (Audit/Admin Module)
          
          üîó Connection Details:
          - Host: {{ mongodb_host }}
          - Port: {{ mongodb_port }}
          - Database: {{ database_name }}
          - User: {{ app_username }}
          - Auth Source: {{ mongodb_auth_source }}
          
          üß™ Test Credentials:
          - Email: test@example.com
          - Username: testuser
          - Password: password123
          - Balance: 1000 credits
          
          üìä Database Verification:
          {{ db_verification.stdout }}
          
          ‚úÖ Database structure is ready for development!

    - name: Display connection string for applications
      debug:
        msg: |
          üîó MongoDB Connection String for Applications:
          
          mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}
          
          üìù Environment Variables:
          MONGODB_URI=mongodb://{{ app_username }}:{{ app_password }}@{{ mongodb_host }}:{{ mongodb_port }}/{{ database_name }}?authSource={{ mongodb_auth_source }}
          MONGODB_DATABASE={{ database_name }}
          MONGODB_USER={{ app_username }}
          MONGODB_PASSWORD={{ app_password }} 