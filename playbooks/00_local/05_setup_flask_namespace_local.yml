---
- name: Set up Flask application namespace and resources (Local k3d)
  hosts: localhost
  connection: local
  vars:
    flask_namespace: flask-app
  tasks:
    - name: Create Flask application namespace
      shell: kubectl create namespace {{ flask_namespace }} --dry-run=client -o yaml | kubectl apply -f -
      changed_when: true

    - name: Label Flask namespace for network policies
      shell: kubectl label namespace {{ flask_namespace }} name={{ flask_namespace }} --overwrite
      changed_when: true

    - name: Create Service Account for Flask application
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: flask-app-sa
          namespace: {{ flask_namespace }}
        EOF
      changed_when: true

    - name: Create Role for local development
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: Role
        metadata:
          name: flask-app-role
          namespace: {{ flask_namespace }}
        rules:
        - apiGroups: [""]
          resources: ["serviceaccounts"]
          verbs: ["get"]
        - apiGroups: [""]
          resources: ["pods"]
          verbs: ["get"]
        - apiGroups: [""]
          resources: ["secrets"]
          verbs: ["get", "list"]
        EOF
      changed_when: true

    - name: Create RoleBinding for Flask application
      shell: |
        cat <<EOF | kubectl apply -f -
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
          name: flask-app-rolebinding
          namespace: {{ flask_namespace }}
        subjects:
        - kind: ServiceAccount
          name: flask-app-sa
          namespace: {{ flask_namespace }}
        roleRef:
          kind: Role
          name: flask-app-role
          apiGroup: rbac.authorization.k8s.io
        EOF
      changed_when: true

    - name: Create Kubernetes secret from 113 local secret files
      shell: |
        # Get absolute path to secrets directory
        SECRETS_DIR="$(pwd)/../../python_base_03/secrets"
        echo "Creating 'external' secret from $SECRETS_DIR"
        
        # Build kubectl create secret command with all files
        SECRET_FILES=""
        for file in "$SECRETS_DIR"/*; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            SECRET_FILES="$SECRET_FILES --from-file=${filename}=${file}"
          fi
        done
        
        # Create or update the secret
        kubectl create secret generic external -n {{ flask_namespace }} $SECRET_FILES --dry-run=client -o yaml | kubectl apply -f -
        
        # Verify secret was created with correct number of files
        SECRET_COUNT=$(kubectl get secret external -n {{ flask_namespace }} -o jsonpath='{.data}' | grep -o '":"' | wc -l)
        echo "✅ Secret 'external' created with $SECRET_COUNT files"
        
        if [ "$SECRET_COUNT" -ne "113" ]; then
          echo "⚠️  Expected 113 files, got $SECRET_COUNT"
          echo "📝 Continuing anyway - secret exists and will be mounted"
        fi
      changed_when: true

    - name: Verify namespace and resources
      shell: kubectl get all -n {{ flask_namespace }}
      register: namespace_status
      changed_when: false

    - name: Display namespace setup status
      debug:
        msg: |
          ✅ Flask application namespace setup completed (Local minikube)!
          
          Namespace: {{ flask_namespace }}
          Service Account: flask-app-sa
          Role: flask-app-role
          RoleBinding: flask-app-rolebinding
          Secret: external (113 files from local filesystem)
          
          Namespace resources:
          {{ namespace_status.stdout }}
          
          🚀 Ready for Flask application deployment! 